{"title":"工作流引擎Activiti快速入门","uid":"66e250ca52164c88abd86f24f70b74f9","slug":"Activiti/工作流引擎Activiti快速入门","date":"2020-06-23T05:32:16.000Z","updated":"2023-01-09T05:49:28.257Z","comments":true,"path":"api/articles/Activiti/工作流引擎Activiti快速入门.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/gy.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Activiti是一个用Java编写的开源工作流引擎，可以执行BPMN 2.0中描述的业务流程。Activiti流程引擎优势在系统开发的易用性和轻量性上。每一项 BPM 业务功能 Activiti 流程引擎都以服务的形式提供给开发人员。通过使用这些服务，开发人员能够构建出功能丰富、轻便且高效的 BPM 应用程序。</p></blockquote>\n<h1 id=\"一、为什么要是用工作流引擎\"><a href=\"#一、为什么要是用工作流引擎\" class=\"headerlink\" title=\"一、为什么要是用工作流引擎\"></a>一、为什么要是用工作流引擎</h1><p>假定我们有一个支付订单状态需要维护，它的状态图如下：<br><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291345843.png\"><br>它的状态跃迁自左向右，清晰名了，而且没有<strong>处理角色</strong>的概念，此时我们使用代码控制好状态流转即可，无需使用框架。<br>再来看另外一个场景，假定我们有一个企业内部采购订单，它的状态图如下：<br><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291345372.png\"></p>\n<p>这个采购订单的状态复杂多变，状态的转换不稳定性很强，随时有可能增加新的状态；而且不同状态的处理人也是不同的，存在权限管理功能，若此时我们仍然使用一个状态字段来维持状态变更，无疑会困难重重。<br>工作流引擎就是为了解决这类问题而生的，我们可以观察当前实体(如支付订单、采购订单)是否具有如下特性，由此来确定是否需要引入工作流引擎。</p>\n<ol>\n<li>状态的个数及其稳定性，个数多且不稳定，适合使用工作流引擎。</li>\n<li>每个状态的处理人，处理人角色多且不稳定，适合使用工作流引擎。</li>\n</ol>\n<p>工作流引擎实际上是放大了状态管理的功能，它根据既有流程图（基于BPMN2规范）的指示，指定每一次状态跃迁的处理角色，在状态变更时持久化评论、表单、附件等数据，保存了完整处理轨迹。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>工作流引擎 vs 规则引擎</strong></p>\n<ol>\n<li>工作流更像是管理状态跃迁的，规则引擎不关心状态跃迁，它关注的是处理过程中复杂条件的组合。</li>\n<li>工作流引擎中包含“人”的任务，天生包含处理人角色控制；规则引擎不关心“人”的任务，不做特殊区分。</li>\n<li>工作流引擎是宏观控制、规则引擎是微观控制。</li>\n</ol></blockquote>\n<h1 id=\"二、BPMN2-0规范简介\"><a href=\"#二、BPMN2-0规范简介\" class=\"headerlink\" title=\"二、BPMN2.0规范简介\"></a>二、BPMN2.0规范简介</h1><p>业务流程模型和标记法（BPMN, Business Process Model and Notation）是一套图形化表示法，用于以图形的方式详细说明各种业务流程。<br>它最初由业务流程管理倡议组织（BPMI, Business Process Management Initiative）开发，名称为”Business Process Modeling Notation”，即“业务流程建模标记法”。BPMI于2005年与对象管理组织（OMG, Object Management Group）合并。2011年1月OMG发布2.0版本（时至今日，没人会用1.0版本了），同时改为现在的名称。<br>BPMN2.0规范的实现，实质上是一个按照特定规范编写的XML文件，使用特定的BPMN设计器，即可以图形化的形式查看和编辑该文件。Activiti以代码的形式实现了这套图形化表示法，使任务的流转依赖图形，而非具体的实现代码。<br><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291345902.png\"><br>如上图所示，BPMN2.0规范包含了三个部分Gateway(网关)、Event(事件)、Activities(活动)。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>**Gateway(网关)**：exclusiveGateway-排他网关，在做判断时使用，除了排他网关还有几个其它类型的网关。</li>\n<li>**Event(事件)**：startEvent-开始事件、endEvent-结束事件，规范要求一个完整流程图必须包含这两个部分。</li>\n<li>**Activities(活动)**：task-任务、sequenceFlow-连接线，活动是流程的主体部分，内部包含的类型相对较多。</li>\n</ol></blockquote>\n<h1 id=\"三、Activiti核心API\"><a href=\"#三、Activiti核心API\" class=\"headerlink\" title=\"三、Activiti核心API\"></a>三、Activiti核心API</h1><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ProcessEngine</td>\n<td>流程引擎，可以获得其他所有的Service。</td>\n</tr>\n<tr>\n<td>RepositoryService</td>\n<td>Repository中存储了流程定义文件、部署和支持数据等信息；RepositoryService提供了对repository的存取服务。</td>\n</tr>\n<tr>\n<td>RuntimeService</td>\n<td>提供启动流程、查询流程实例、设置获取流程实例变量等功能。</td>\n</tr>\n<tr>\n<td>TaskService</td>\n<td>提供运行时任务查询、领取、完成、删除以及变量设置等功能。</td>\n</tr>\n<tr>\n<td>HistoryService</td>\n<td>用于获取正在运行或已经完成的流程实例的信息。</td>\n</tr>\n<tr>\n<td>FormService</td>\n<td>提供定制任务表单和存储表单数据的功能，注意存储表单数据可选的功能，也可以向自建数据表中提交数据。</td>\n</tr>\n<tr>\n<td>IdentityService</td>\n<td>提供对内建账户体系的管理功能，注意它是可选的服务，可以是用外部账户体系。</td>\n</tr>\n<tr>\n<td>ManagementService</td>\n<td>较少使用，与流程管理无关，主要用于Activiti系统的日常维护。</td>\n</tr>\n</tbody></table>\n<p>完成一次流程的处理，常见步骤以及他们使用的Service如下图所示：<br><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291346663.png\"></p>\n<h2 id=\"1、流程-amp-流程实例\"><a href=\"#1、流程-amp-流程实例\" class=\"headerlink\" title=\"1、流程&amp;流程实例\"></a>1、流程&amp;流程实例</h2><p>流程由遵守BPMN2.0规范的xml文件指定，定义流程即完成流程文件的设计。<br>流程发布后，使用RuntimeService可以开启一个流程实例，每个流程可以开启N次流程实例，且实例之间的数据相互隔离。</p>\n<h2 id=\"2、用户任务\"><a href=\"#2、用户任务\" class=\"headerlink\" title=\"2、用户任务\"></a>2、用户任务</h2><p>用户任务是BPMN2.0规范中Activities(活动)组件下的重要组成部分，在Activiti中对应Task类；区别于其他类型的任务，用户任务需要进行领取操作，不会自动执行，且领取从待处理任务列表中移除，其他候选人不可见。</p>\n<h2 id=\"3、用户-amp-角色\"><a href=\"#3、用户-amp-角色\" class=\"headerlink\" title=\"3、用户&amp;角色\"></a>3、用户&amp;角色</h2><p>Activiti中内建了一个简单的账户体系，用户和角色是多对多的关系；IdentityService中提供了对用户、角色操作的API。<br>另外，用户、角色与任务的联系，仅仅通过userId或groupId，不要求必须使用内建账户体系；由于内建的过于简单，开发者完全可以使用自有的账户体系。</p>\n<h2 id=\"4、受让人、候选人、候选组\"><a href=\"#4、受让人、候选人、候选组\" class=\"headerlink\" title=\"4、受让人、候选人、候选组\"></a>4、受让人、候选人、候选组</h2><p>对用户任务做领取操作(claim)，即指定了该任务的受让人，每个任务只能有一个受让人，不能多次领取（但可以再次转让）。<br>任务的候选人和候选组支持配置多个，目的是指定处理该任务的人，不在候选列表中的人不允许处理该任务。另外，候选人、候选组可以流程文件中指定，也可以在监听事件中动态指定。</p>\n<h2 id=\"5、变量\"><a href=\"#5、变量\" class=\"headerlink\" title=\"5、变量\"></a>5、变量</h2><p>Activiti支持以key&#x2F;value的形式，对变量做持久化处理。变量通常有两个重要作用：</p>\n<ol>\n<li>存储一些跟流程相关的业务数据，例如处理任务时提交的表单数据。</li>\n<li>流程定义文件中，可以通过UEL表达式获取存储的变量，例如，在互斥网关中选择正确的传出顺序流。</li>\n</ol>\n<h2 id=\"6、表单\"><a href=\"#6、表单\" class=\"headerlink\" title=\"6、表单\"></a>6、表单</h2><p>用户处理任务时，通常需要填写备注说明等表单数据，Activiti的FormService对此提供了支持，表单实现如下三种可选的方式：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>开启方式</th>\n<th>数据存储位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>动态表单</td>\n<td>流程定义文件中的activiti:formProperty属性</td>\n<td>与变量一样，以key&#x2F;value的形式存储在变量表</td>\n</tr>\n<tr>\n<td>外置表单</td>\n<td>流程定义文件中的activiti:formkey属性</td>\n<td>与变量一样，以key&#x2F;value的形式存储在变量表</td>\n</tr>\n<tr>\n<td>普通表单</td>\n<td>脱离Activiti掌控，开发人员自行创建表单和数据表，并使表单和任务关联即可</td>\n<td>任意位置</td>\n</tr>\n</tbody></table>\n<p>三种方式中，<strong>动态表单</strong>由于无法指定样式，使用场景不多；<strong>外置表单</strong>的赋值和提交都依托Activiti引擎。实际使用中主要使用第三种方式<strong>普通表单</strong>，它的页面渲染赋值都由个人掌控，Activiti仅负责流程流转相关工作，页面渲染部分保持独立会使结构更清晰。</p>\n<h2 id=\"7、监听器\"><a href=\"#7、监听器\" class=\"headerlink\" title=\"7、监听器\"></a>7、监听器</h2><p>任务执行时，开发者常常需要触发一些自定义的动作，如动态分配候选人、任务结束时发送通知等；Activiti为开发者提供了两种方式来满足此类需求。</p>\n<ol>\n<li>执行监听器：监听一组有限的流程执行操作，如start、end和take；</li>\n<li>事件监听器：每当流程实例产生变化时，监听器都能得到通知消息（<a href=\"https://www.activiti.org/userguide/#eventDispatcherEventTypes\">官方文档</a>）；</li>\n</ol>\n<h1 id=\"四、请假流程实例\"><a href=\"#四、请假流程实例\" class=\"headerlink\" title=\"四、请假流程实例\"></a>四、请假流程实例</h1><p><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291346290.png\"><br>先上代码，项目Demo：<a href=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291348547.zip\">activiti-demo</a>，配置本地正确的数据库链接，然后启动项目，Activiti会自动初始化数据库建表。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Activiti的表都以act_开头，第二部分是表示表的用途的两个字母缩写标识，用途也和服务的API对应。</p></blockquote>\n<ul>\n<li>act_hi_*：’hi’表示 history，此前缀的表包含历史数据，如历史(结束)流程实例，变量，任务等等。</li>\n<li>act_ge_*：’ge’表示 general，此前缀的表为通用数据，用于不同场景中。</li>\n<li>act_evt_*：’evt’表示 event，此前缀的表为事件日志。</li>\n<li>act_procdef_*：’procdef’表示 processdefine，此前缀的表为记录流程定义信息。</li>\n<li>act_re_*：’re’表示 repository，此前缀的表包含了流程定义和流程静态资源(图片，规则等等)。</li>\n<li>act_ru_*：’ru’表示 runtime，此前缀的表是记录运行时的数据，包含流程实例，任务，变量，异步任务等运行中的数据。Activiti只在流程实例执行过程中保存这些数据，在流程结束时就会删除这些记录。</li>\n</ul>\n<h2 id=\"1、画流程图\"><a href=\"#1、画流程图\" class=\"headerlink\" title=\"1、画流程图\"></a>1、画流程图</h2><p>流程图本质是一个符合BPMN2.0规范的xml文件，由拖拽式的设计软件完成，方式有很多，我在Git上准备的项目中内置了一个Vue版本的流程图设计工具，可以直接使用该模块来制作流程图。<br><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291347080.png\"></p>\n<h2 id=\"2、部署流程\"><a href=\"#2、部署流程\" class=\"headerlink\" title=\"2、部署流程\"></a>2、部署流程</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 流程部署\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RepositoryService</span> repositoryService <span class=\"token operator\">=</span> processEngine<span class=\"token punctuation\">.</span><span class=\"token function\">getRepositoryService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//资源对象</span>\n        <span class=\"token class-name\">Deployment</span> deployment <span class=\"token operator\">=</span> repositoryService<span class=\"token punctuation\">.</span><span class=\"token function\">createDeployment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//创建一个部署对象</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请假流程\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addClasspathResource</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BPMN</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"部署ID：\"</span><span class=\"token operator\">+</span>deployment<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"部署名称：\"</span><span class=\"token operator\">+</span>deployment<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3、启动流程\"><a href=\"#3、启动流程\" class=\"headerlink\" title=\"3、启动流程\"></a>3、启动流程</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 启动流程实例分配任务给个人\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//脑补一下这个是从前台传过来的数据</span>\n        <span class=\"token class-name\">String</span> userKey<span class=\"token operator\">=</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//每一个流程有对应的一个key这个是某一个流程内固定的写在bpmn内的</span>\n        <span class=\"token class-name\">String</span> processDefinitionKey <span class=\"token operator\">=</span><span class=\"token string\">\"myProcess\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> variables<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//userKey在上文的流程变量中指定了</span>\n        variables<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userKey\"</span><span class=\"token punctuation\">,</span> userKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        variables<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        variables<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ProcessInstance</span> instance <span class=\"token operator\">=</span> runtimeService\n                <span class=\"token punctuation\">.</span><span class=\"token function\">startProcessInstanceByKey</span><span class=\"token punctuation\">(</span>processDefinitionKey<span class=\"token punctuation\">,</span>variables<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"流程实例ID:\"</span><span class=\"token operator\">+</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"流程定义ID:\"</span><span class=\"token operator\">+</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">getProcessDefinitionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4、查询待办\"><a href=\"#4、查询待办\" class=\"headerlink\" title=\"4、查询待办\"></a>4、查询待办</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 查询当前人的个人任务\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> assignee <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> taskService<span class=\"token punctuation\">.</span><span class=\"token function\">createTaskQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">taskAssignee</span><span class=\"token punctuation\">(</span>assignee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orderByTaskCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> task<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务ID:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务名称:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务的创建时间:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务的办理人:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getAssignee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"流程实例ID：\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getProcessInstanceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行对象ID:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getExecutionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"流程定义ID:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getProcessDefinitionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getOwner:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getCategory:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getCategory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDescription:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getFormKey:\"</span><span class=\"token operator\">+</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getFormKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getProcessVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:\"</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" value:\"</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getTaskLocalVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:\"</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" value:\"</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5、处理待办\"><a href=\"#5、处理待办\" class=\"headerlink\" title=\"5、处理待办\"></a>5、处理待办</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 完成任务\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">completeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//任务ID</span>\n        <span class=\"token class-name\">String</span> taskId <span class=\"token operator\">=</span> <span class=\"token string\">\"9ac93504-0ef0-11ec-99d7-acde48001122\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> variables<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        variables<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//userKey在上文的流程变量中指定了</span>\n        taskService<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span>taskId<span class=\"token punctuation\">,</span>variables<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成任务：任务ID：\"</span><span class=\"token operator\">+</span>taskId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"………\"><a href=\"#………\" class=\"headerlink\" title=\"……….\"></a>……….</h2><p>时间有限，更多接口可自行尝试实现</p>\n","text":" Activiti是一个用Java编写的开源工作流引擎，可以执行BPMN 2.0中描述的业务流程。Activiti流程引擎优势在系统开发的易用性和轻量性上。每一项 BPM 业务功能 Activiti 流程引擎都以服务的形式提供给开发人员。通过使用这些服务，开发人员能够构建出功能丰...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"Activiti","slug":"Activiti","count":1,"path":"api/tags/Activiti.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%98%AF%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">一、为什么要是用工作流引擎</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81BPMN2-0%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">二、BPMN2.0规范简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Activiti%E6%A0%B8%E5%BF%83API\"><span class=\"toc-text\">三、Activiti核心API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%B5%81%E7%A8%8B-amp-%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">1、流程&amp;流程实例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">2、用户任务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%94%A8%E6%88%B7-amp-%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">3、用户&amp;角色</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%8F%97%E8%AE%A9%E4%BA%BA%E3%80%81%E5%80%99%E9%80%89%E4%BA%BA%E3%80%81%E5%80%99%E9%80%89%E7%BB%84\"><span class=\"toc-text\">4、受让人、候选人、候选组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">5、变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E8%A1%A8%E5%8D%95\"><span class=\"toc-text\">6、表单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">7、监听器</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E8%AF%B7%E5%81%87%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">四、请假流程实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">1、画流程图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2、部署流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">3、启动流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%9F%A5%E8%AF%A2%E5%BE%85%E5%8A%9E\"><span class=\"toc-text\">4、查询待办</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%A4%84%E7%90%86%E5%BE%85%E5%8A%9E\"><span class=\"toc-text\">5、处理待办</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%A6%E2%80%A6%E2%80%A6\"><span class=\"toc-text\">……….</span></a></li></ol></li></ol>","author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java 基础","uid":"b4b30b3366bb496de67ea3da9b9ffa6f","slug":"Java/JAVA基础","date":"2022-02-22T05:32:16.000Z","updated":"2023-01-16T05:37:51.966Z","comments":true,"path":"api/articles/Java/JAVA基础.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/genji.jpg","text":"一、数据类型基本类型 byte&#x2F;8 char&#x2F;16 short&#x2F;16 int&#x2F;32 float&#x2F;32 long&#x2F;64 double&#x2F;64 boolean&#x2F;~ boolean 只有两个值：true、fa...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":2,"path":"api/tags/JAVA.json"},{"name":"Java基础","slug":"Java基础","count":1,"path":"api/tags/Java基础.json"},{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringMVC项目实现Session共享","uid":"49c4631107889bc801e70cd25dbb2b0a","slug":"Java/SpringMVC项目实现Session共享","date":"2019-12-11T12:22:12.000Z","updated":"2022-12-29T03:22:23.167Z","comments":true,"path":"api/articles/Java/SpringMVC项目实现Session共享.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/darkness.jpg","text":" 近期接到一个老项目的改造工作，需要将其由单商户单节点应用 SAAS 化，由于老项目基于 SpringMVC 构建，未做前后端分离，无法直接接入现有平台 JWT，综合考虑继续沿用 Session 机制，使用 Spring Session 实现集群 Session 共享。事情不复杂...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"Session","slug":"Session","count":1,"path":"api/tags/Session.json"},{"name":"SpringMVC","slug":"SpringMVC","count":1,"path":"api/tags/SpringMVC.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}