{"title":"MySQL 数据库设计规范","uid":"87cebc6d905dece24636202906841487","slug":"MySQL/MySQL数据库设计规范","date":"2022-02-23T03:37:18.000Z","updated":"2022-12-29T05:37:52.731Z","comments":true,"path":"api/articles/MySQL/MySQL数据库设计规范.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/2b.png","content":"<h1 id=\"MySQL-数据库设计规范\"><a href=\"#MySQL-数据库设计规范\" class=\"headerlink\" title=\"MySQL 数据库设计规范\"></a>MySQL 数据库设计规范</h1><h1 id=\"1-规范背景与目的\"><a href=\"#1-规范背景与目的\" class=\"headerlink\" title=\"1. 规范背景与目的\"></a>1. 规范背景与目的</h1><p>MySQL 数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用 MySQL 数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导 RD、QA、OP 等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL 编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p>\n<h1 id=\"2-设计规范\"><a href=\"#2-设计规范\" class=\"headerlink\" title=\"2. 设计规范\"></a>2. 设计规范</h1><h2 id=\"2-1-数据库设计\"><a href=\"#2-1-数据库设计\" class=\"headerlink\" title=\"2.1 数据库设计\"></a>2.1 数据库设计</h2><p>以下所有规范会按照【高危】、【强制】、【建议】三个级别进行标注，遵守优先级从高到低。</p>\n<p>对于不满足【高危】和【强制】两个级别的设计，DBA 会强制打回要求修改。</p>\n<h3 id=\"2-1-1-一般命名规则\"><a href=\"#2-1-1-一般命名规则\" class=\"headerlink\" title=\"2.1.1 一般命名规则\"></a>2.1.1 一般命名规则</h3><ol>\n<li>【强制】使用小写，有助于提高打字速度，避免因大小写敏感而导致的错误。</li>\n<li>【强制】没有空格，使用下划线代替。</li>\n<li>【强制】名称中没有数字，只有英文字母。</li>\n<li>【强制】有效的可理解的名称。</li>\n<li>【强制】名称应该是自我解释的。</li>\n<li>【强制】名称不应超过 32 个字符。</li>\n<li>【强制】避免使用前缀。</li>\n</ol>\n<h3 id=\"2-1-2-库\"><a href=\"#2-1-2-库\" class=\"headerlink\" title=\"2.1.2 库\"></a>2.1.2 库</h3><ol>\n<li>【强制】遵守以上全部一般命名规则。 </li>\n<li>【强制】使用单数。 </li>\n<li>【强制】库的名称格式：业务系统名称_子系统名。 </li>\n<li>【强制】一般分库名称命名格式是<code>库通配名_编号</code>，编号从 0 开始递增，比如 <code>northwind_001</code>，以时间进行分库的名称格式是<code>库通配名_时间</code>。 </li>\n<li>【强制】创建数据库时必须显式指定字符集，并且字符集只能是 utf8 或者 utf8mb4。创建数据库 SQL 举例：  <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db_name <span class=\"token keyword\">default</span> <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"2-1-3-表\"><a href=\"#2-1-3-表\" class=\"headerlink\" title=\"2.1.3 表\"></a>2.1.3 表</h3><ol>\n<li>【强制】遵守以上全部一般命名规则。</li>\n<li>【强制】使用单数。</li>\n<li>【强制】相关模块的表名与表名之间尽量体现 join 的关系，如 <code>user</code> 表和 <code>user_login</code> 表。</li>\n<li>【强制】创建表时必须显式指定字符集为 utf8 或 utf8mb4。</li>\n<li>【强制】创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为 InnoDB。当需要使用除 InnoDB&#x2F;MyISAM&#x2F;Memory 以外的存储引擎时，必须通过 DBA 审核才能在生产环境中使用。因为 InnoDB 表支持事务、行锁、宕机恢复、MVCC 等关系型数据库重要特性，为业界使用最多的 MySQL 存储引擎。而这是其它大多数存储引擎不具备的，因此首推 InnoDB。</li>\n<li>【强制】建表必须有 comment。</li>\n<li>【强制】关于主键：(1) 命名为 <code>id</code>，类型为 int 或 bigint，且为 <code>auto_increment</code>；(2) 标识表里每一行主体的字段不要设为主键，建议设为其它字段如 <code>user_id</code>，<code>order_id</code>等，并建立 <code>unique key</code> 索引。因为如果设为主键且主键值为随机插入，则会导致 InnoDB 内部 page 分裂和大量随机 I&#x2F;O，性能下降。</li>\n<li>【建议】核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段 <code>create_time</code> 和最后更新时间字段 <code>update_time</code>，便于排查问题。</li>\n<li>【建议】表中所有字段必须都是 <code>NOT NULL</code> 属性，业务可以根据需要定义 <code>DEFAULT</code> 值。因为使用 <code>NULL</code> 值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li>\n<li>【建议】建议对表里的 <code>blob</code>、<code>text</code> 等大字段，垂直拆分到其它表里，仅在需要读这些对象的时候才去 select。</li>\n<li>【建议】反范式设计：把经常需要 join 查询的字段，在其它表里冗余一份。如 <code>username</code> 属性在 <code>user_account</code>，<code>user_login_log</code> 等表里冗余一份，减少 join 查询。</li>\n<li>【强制】中间表用于保留中间结果集，名称必须以 <code>tmp_</code> 开头。备份表用于备份或抓取源表快照，名称必须以 <code>bak_</code> 开头。中间表和备份表定期清理。</li>\n<li>【强制】对于超过 100W 行的大表进行 <code>alter table</code>，必须经过 DBA 审核，并在业务低峰期执行。因为 <code>alter table</code> 会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li>\n</ol>\n<h3 id=\"2-1-4-字段\"><a href=\"#2-1-4-字段\" class=\"headerlink\" title=\"2.1.4 字段\"></a>2.1.4 字段</h3><ol>\n<li>【强制】遵守以上全部一般命名规则。</li>\n<li>【建议】尽可能选择短的或一两个单词。</li>\n<li>【强制】避免使用保留字作为字段名称：<code>order</code>，<code>date</code>，<code>name</code> 是数据库的保留字，避免使用它。可以为这些名称添加前缀使其易于理解，如 <code>user_name</code>，<code>signup_date</code> 等。</li>\n<li>【强制】避免使用与表名相同的字段名，这会在编写查询时造成混淆。</li>\n<li>【强制】在数据库模式上定义外键。</li>\n<li>【强制】避免使用缩写或基于首字母缩写词的名称。</li>\n<li>【强制】外键列必须具有表名及其主键，例如：<code>blog_id</code> 表示来自表博客的外键 id。</li>\n</ol>\n<h3 id=\"2-1-5-字段数据类型优化\"><a href=\"#2-1-5-字段数据类型优化\" class=\"headerlink\" title=\"2.1.5 字段数据类型优化\"></a>2.1.5 字段数据类型优化</h3><ol>\n<li>【建议】表中的自增列（<code>auto_increment</code> 属性），推荐使用 <code>bigint</code> 类型。因为无符号 <code>int</code> 存储范围为 <code>0~4,294,967,295</code>（不到 43 亿），溢出后会导致报错。 </li>\n<li>【建议】业务中选择性很少的状态 <code>status</code>、类型 <code>type</code> 等字段推荐使用 <code>tinytint</code> 或者 <code>smallint</code> 类型节省存储空间。 </li>\n<li>【建议】业务中 IP 地址字段推荐使用 <code>int</code> 类型，不推荐用 <code>char(15)</code>。因为 <code>int</code> 只占 4 字节，可以用如下函数相互转换，而 <code>char(15)</code> 占用至少 15 字节。</li>\n</ol>\n<p>SQL: </p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> inet_aton<span class=\"token punctuation\">(</span><span class=\"token string\">'192.168.2.12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> inet_ntoa<span class=\"token punctuation\">(</span><span class=\"token number\">3232236044</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>PHP: </p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">ip2long</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'192.168.2.12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">long2ip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3530427185</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Java:  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">ipToLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> addrArray <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> addrArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> power <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n        num <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>addrArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> power<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longToIp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span>\n           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span>\n           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span>\n           <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>【建议】不推荐使用 <code>enum</code>，<code>set</code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用 <code>tinyint</code> 或 <code>smallint</code>。 </li>\n<li>【建议】不推荐使用 <code>blob</code>，<code>text</code> 等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和 PM、RD 沟通，是否真的需要这么大字段。InnoDB 中当一行记录超过 8098 字节时，会将该记录中选取最长的一个字段将其 768 字节放在原始 page 里，该字段余下内容放在 <code>overflow-page</code> 里。不幸的是在 <code>compact</code> 行格式下，原始 <code>page</code> 和 <code>overflow-page</code> 都会加载。 </li>\n<li>【建议】存储金钱的字段，建议用 <code>int</code> 以分为单位存储，最大数值约 4290 万，程序端乘以 100 和除以 100 进行存取。因为 <code>int</code> 占用 4 字节，而 <code>double</code> 占用 8 字节，空间浪费。 </li>\n<li>【建议】文本数据尽量用 <code>varchar</code> 存储。因为 <code>varchar</code> 是变长存储，比 <code>char</code> 更省空间。MySQL server 层规定一行所有文本最多存 65535 字节，因此在 utf8 字符集下最多存 21844 个字符，超过会自动转换为 <code>mediumtext</code> 字段。而 <code>text</code> 在 utf8 字符集下最多存 21844 个字符，<code>mediumtext</code> 最多存 2^24&#x2F;3 个字符，<code>longtext</code> 最多存 2^32 个字符。一般建议用 <code>varchar</code> 类型，字符数不要超过 2700。 </li>\n<li>【建议】时间类型尽量选取 <code>timestamp</code>。因为 <code>datetime</code> 占用 8 字节，<code>timestamp</code> 仅占用 4 字节，但是范围为 <code>1970-01-01 00:00:01</code> 到 <code>2038-01-01 00:00:00</code>。更为高阶的方法，选用 <code>int</code> 来存储时间，使用 SQL 函数 <code>unix_timestamp()</code> 和 <code>from_unixtime()</code> 来进行转换。</li>\n</ol>\n<ul>\n<li>详细存储大小参考下图：  <table>\n<thead>\n<tr>\n<th>类型（同义词）</th>\n<th>存储长度(BYTES)</th>\n<th>最小值(SIGNED&#x2F;UNSIGNED)</th>\n<th>最大值(SIGNED&#x2F;UNSIGNED)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>整形数字</em></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>TINYINT</td>\n<td>1</td>\n<td>-128&#x2F;0</td>\n<td>127&#x2F;255</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>2</td>\n<td>-32,768&#x2F;0</td>\n<td>32767&#x2F;65,535</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>3</td>\n<td>-8,388,608&#x2F;0</td>\n<td>8388607&#x2F;16,777,215&#x2F;</td>\n</tr>\n<tr>\n<td>INT(INTEGER)</td>\n<td>4</td>\n<td>-2,14,7483,648&#x2F;0</td>\n<td>2147483647&#x2F;4,294,967,295&#x2F;</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>8</td>\n<td>-2^63&#x2F;0</td>\n<td>263-1&#x2F;264-1</td>\n</tr>\n<tr>\n<td><em>小数支持</em></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>FLOAT[(M[,D])]</td>\n<td>4 or 8</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DOUBLE[(M[,D])]</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(REAL, DOUBLE PRECISION)</td>\n<td>8</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td><em>时间类型</em></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>8</td>\n<td>1001-01-01 00:00:00</td>\n<td>9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>3</td>\n<td>1001-01-01</td>\n<td>9999-12-31</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>3</td>\n<td>00:00:00</td>\n<td>23:59:59</td>\n</tr>\n<tr>\n<td>YEAR</td>\n<td>1</td>\n<td>1001</td>\n<td>9999</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>4</td>\n<td>1970-01-01 00:00:00</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"2-1-6-索引设计\"><a href=\"#2-1-6-索引设计\" class=\"headerlink\" title=\"2.1.6 索引设计\"></a>2.1.6 索引设计</h3><ol>\n<li>【强制】InnoDB 表必须主键为 <code>id int/bigint auto_increment</code>，且主键值禁止被更新。</li>\n<li>【建议】主键的名称以 <code>pk_</code> 开头，唯一键以 <code>uk_</code> 开头，普通索引以 <code>ix_</code> 开头，一律使用小写格式，以表名&#x2F;字段的名称或缩写作为后缀。</li>\n<li>【强制】InnoDB 和 MyISAM 存储引擎表，索引类型必须为 <code>BTREE</code>；MEMORY 表可以根据需要选择 <code>HASH</code> 或者 <code>BTREE</code> 类型索引。</li>\n<li>【强制】单个索引中每个索引记录的长度不能超过 64KB。</li>\n<li>【建议】单个表上的索引个数不能超过 7 个。</li>\n<li>【建议】在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列 <code>user_id</code> 的区分度可由 <code>select count(distinct user_id)</code> 计算出来。</li>\n<li>【建议】在多表 join 的 SQL 里，保证被驱动表的连接列上有索引，这样 join 执行效率最高。</li>\n<li>【建议】建表或加索引时，保证表里互相不存在冗余索引。对于 MySQL 来说，如果表里已经存在 <code>key(a, b)</code>，则 <code>key(a)</code> 为冗余索引，需要删除。</li>\n<li>【建议】如果选择性超过 20%，那么全表扫描比使用索引性能更优，即没有设置索引的必要。</li>\n</ol>\n<h3 id=\"2-1-7-分库分表、分区表\"><a href=\"#2-1-7-分库分表、分区表\" class=\"headerlink\" title=\"2.1.7 分库分表、分区表\"></a>2.1.7 分库分表、分区表</h3><ol>\n<li>【强制】分区表的分区字段（<code>partition-key</code>）必须有索引，或者是组合索引的首列。</li>\n<li>【强制】单个分区表中的分区（包括子分区）个数不能超过 1024。</li>\n<li>【强制】上线前 RD 或者 DBA 必须指定分区表的创建、清理策略。</li>\n<li>【强制】访问分区表的 SQL 必须包含分区键。</li>\n<li>【建议】单个分区文件不超过 2G，总大小不超过 50G。建议总分区数不超过 20 个。</li>\n<li>【强制】对于分区表执行 <code>alter table</code> 操作，必须在业务低峰期执行。</li>\n<li>【强制】采用分库策略的，库的数量不能超过 1024。</li>\n<li>【强制】采用分表策略的，表的数量不能超过 4096。</li>\n<li>【建议】单个分表不超过 500W 行，ibd 文件大小不超过 2G，这样才能让数据分布式变得性能更佳。</li>\n<li>【建议】水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li>\n</ol>\n<h3 id=\"2-1-8-字符集\"><a href=\"#2-1-8-字符集\" class=\"headerlink\" title=\"2.1.8 字符集\"></a>2.1.8 字符集</h3><ol>\n<li>【强制】数据库本身库、表、列所有字符集必须保持一致，为 <code>utf8</code> 或 <code>utf8mb4</code>。</li>\n<li>【强制】前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为 <code>utf8</code>。</li>\n</ol>\n<h3 id=\"2-1-9-程序层-DAO-设计建议\"><a href=\"#2-1-9-程序层-DAO-设计建议\" class=\"headerlink\" title=\"2.1.9 程序层 DAO 设计建议\"></a>2.1.9 程序层 DAO 设计建议</h3><ol>\n<li>【建议】新的代码不要用 model，推荐使用手动拼 SQL + 绑定变量传入参数的方式。因为 model 虽然可以使用面向对象的方式操作 db，但是其使用不当很容易造成生成的 SQL 非常复杂，且 model 层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li>\n<li>【建议】前端程序连接 MySQL 或者 Redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li>\n<li>【建议】前端程序报错里尽量能够提示 MySQL 或 Redis 原生态的报错信息，便于排查错误。</li>\n<li>【建议】对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li>\n<li>【建议】对于 <code>log</code> 或 <code>history</code> 类型的表，随时间增长容易越来越大，因此上线前 RD 或者 DBA 必须建立表数据清理或归档方案。</li>\n<li>【建议】在应用程序设计阶段，RD 必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20 秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li>\n<li>【建议】多个并发业务逻辑访问同一块数据（InnoDB 表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类 SQL 尽量基于主键去更新。</li>\n<li>【建议】业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li>\n<li>【建议】对于单表读写比大于 10:1 的数据行或单个列，可以将热点数据放在缓存里（如 Memcached 或 Redis），加快访问速度，降低 MySQL 压力。</li>\n</ol>\n<h3 id=\"2-1-10-一个规范的建表语句示例\"><a href=\"#2-1-10-一个规范的建表语句示例\" class=\"headerlink\" title=\"2.1.10 一个规范的建表语句示例\"></a>2.1.10 一个规范的建表语句示例</h3><ul>\n<li>一个较为规范的建表语句为： <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> \n<span class=\"token punctuation\">(</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span>            <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span></span>       <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户 ID'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span>      <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'登录名'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>email<span class=\"token punctuation\">`</span></span>         <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'邮箱'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>nickname<span class=\"token punctuation\">`</span></span>      <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'昵称'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>avatar<span class=\"token punctuation\">`</span></span>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'头像'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>birthday<span class=\"token punctuation\">`</span></span>      <span class=\"token keyword\">date</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'生日'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gender<span class=\"token punctuation\">`</span></span>        <span class=\"token keyword\">tinyint</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>intro<span class=\"token punctuation\">`</span></span>         <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'简介'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>resume_url<span class=\"token punctuation\">`</span></span>    <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'简历存放地址'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>register_ip<span class=\"token punctuation\">`</span></span>   <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户注册时的源 IP'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>review_status<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">tinyint</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'审核状态，1-通过，2-审核中，3-未通过，4-尚未提交审核'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_time<span class=\"token punctuation\">`</span></span>   <span class=\"token keyword\">timestamp</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'记录创建的时间'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_time<span class=\"token punctuation\">`</span></span>   <span class=\"token keyword\">timestamp</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'资料修改的时间'</span><span class=\"token punctuation\">,</span> \n    \n    <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_user_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">key</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_username<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">key</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_create_time<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_time<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>review_status<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">engine</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span>\n<span class=\"token keyword\">default</span> <span class=\"token keyword\">charset</span> <span class=\"token operator\">=</span> utf8 \n<span class=\"token keyword\">comment</span> <span class=\"token operator\">=</span> <span class=\"token string\">'用户基本信息'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"2-2-SQL-编写\"><a href=\"#2-2-SQL-编写\" class=\"headerlink\" title=\"2.2 SQL 编写\"></a>2.2 SQL 编写</h2><h3 id=\"2-2-1-DML-语句\"><a href=\"#2-2-1-DML-语句\" class=\"headerlink\" title=\"2.2.1 DML 语句\"></a>2.2.1 DML 语句</h3><ol>\n<li>【强制】select 语句必须指定具体字段名称，禁止写成 <code>*</code>。因为 <code>select *</code> 会将不该读的数据也从 MySQL 里读出来，造成网卡压力。</li>\n<li>【强制】insert 语句指定具体字段名称，不要写成 <code>insert into t1 values(…)</code>，道理同上。</li>\n<li>【建议】<code>insert into … values(xx),(xx),(xx)…</code>，这里 xx 的值不要超过 5000 个。值过多虽然上线很快，但会引起主从同步延迟。</li>\n<li>【建议】select 语句不要使用 <code>union</code>，推荐使用 <code>union all</code>，并且 <code>union</code> 子句个数限制在 5 个以内。因为 <code>union all</code> 不需要去重，节省数据库资源，提高性能。</li>\n<li>【建议】in 值列表限制在 500 以内。例如 <code>select … where user_id in(…500 个以内…)</code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li>\n<li>【建议】事务里批量更新数据需要控制数量，进行必要的 sleep，做到少量多次。</li>\n<li>【强制】事务涉及的表必须全部是 InnoDB 表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</li>\n<li>【强制】写入和事务发往主库，只读 SQL 发往从库。</li>\n<li>【强制】除静态表或小表（100 行以内），dml 语句必须有 where 条件，且使用索引查找。</li>\n<li>【强制】生产环境禁止使用 <code>hint</code>，如 <code>sql_no_cache</code>，<code>force index</code>，<code>ignore key</code>，<code>straight join</code> 等。因为 <code>hint</code> 是用来强制 sql 按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信 MySQL 优化器。</li>\n<li>【强制】where 条件里等号左右字段类型必须一致，否则无法利用索引。</li>\n<li>【建议】<code>select|update|delete|replace</code> 要有 where 子句，且 where 子句的条件必需使用索引查找。</li>\n<li>【强制】生产数据库中强烈不推荐大表上发生全表扫描，但对于 100 行以下的静态表可以全表扫描。查询数据量不要超过表行数的 25%，否则不会利用索引。</li>\n<li>【强制】where 子句中禁止只使用全模糊的 like 条件进行查找，必须有其它等值或范围查询条件，否则无法利用索引。</li>\n<li>【建议】索引列不要使用函数或表达式，否则无法利用索引。如 <code>where length(name) = &#39;admin&#39;</code> 或 <code>where user_id + 2 = 10023</code>。</li>\n<li>【建议】减少使用 or 语句，可将 or 语句优化为 union，然后在各个 where 条件上建立索引。如 <code>where a = 1 or b = 2</code> 优化为 <code>where a = 1 … union … where b = 2, key(a), key(b)</code>。</li>\n<li>【建议】分页查询，当 <code>limit</code> 起点较高时，可先用过滤条件进行过滤。如 <code>select a, b, c from t1 limit 10000, 20;</code> 优化为: <code>select a, b, c from t1 where id &gt; 10000 limit 20;</code>。</li>\n</ol>\n<h3 id=\"2-2-2-多表连接\"><a href=\"#2-2-2-多表连接\" class=\"headerlink\" title=\"2.2.2 多表连接\"></a>2.2.2 多表连接</h3><ol>\n<li>【强制】禁止跨 DB 的 join 语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li>\n<li>【强制】禁止在业务的更新类 SQL 语句中使用 join，比如 <code>update t1 join t2 …</code>。</li>\n<li>【建议】不建议使用子查询，建议将子查询 SQL 拆开结合程序多次查询，或使用 join 来代替子查询。</li>\n<li>【建议】线上环境，多表 join 不要超过 3 个表。</li>\n<li>【建议】多表连接查询推荐使用别名，且 select 列表中要用别名引用字段，数据库.表格式，如 <code>select a from db1.table1 alias1 where …</code>。</li>\n<li>【建议】在多表 join 中，尽量选取结果集较小的表作为驱动表，来 join 其它表。</li>\n</ol>\n<h3 id=\"2-2-3-事务\"><a href=\"#2-2-3-事务\" class=\"headerlink\" title=\"2.2.3 事务\"></a>2.2.3 事务</h3><ol>\n<li>【建议】事务中 <code>insert|update|delete|replace</code> 语句操作的行数控制在 2000 以内，以及 where 子句中 in 列表的传参个数控制在 500 以内。</li>\n<li>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的 sleep，一般建议值 5-10 秒。</li>\n<li>【建议】对于有 <code>auto_increment</code> 属性字段的表的插入操作，并发需要控制在 200 以内。</li>\n<li>【强制】程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为 <code>repeatable-read</code>。</li>\n<li>【建议】事务里包含 SQL 不超过 5 个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL 内部缓存、连接消耗过多等雪崩问题。</li>\n<li>【建议】事务里更新语句尽量基于主键或 <code>unique key</code>，如 <code>update … where id = XX;</code>，否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li>\n<li>【建议】尽量把一些典型外部调用移出事务，如调用 Web Service，访问文件存储等，从而避免事务过长。</li>\n<li>【建议】对于 MySQL 主从延迟严格敏感的 select 语句，请开启事务强制访问主库。</li>\n</ol>\n<h3 id=\"2-2-4-排序和分组\"><a href=\"#2-2-4-排序和分组\" class=\"headerlink\" title=\"2.2.4 排序和分组\"></a>2.2.4 排序和分组</h3><ol>\n<li>【建议】减少使用 <code>order by</code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>order by</code>、<code>group by</code>、<code>distinct</code> 这些语句较为耗费 CPU，数据库的 CPU 资源是极其宝贵的。</li>\n<li>【建议】<code>order by</code>、<code>group by</code>、<code>distinct</code> 这些 SQL 尽量利用索引直接检索出排序好的数据。如 <code>where a = 1 order by</code> 可以利用 <code>key(a, b)</code>。</li>\n<li>【建议】包含了 <code>order by</code>、<code>group by</code>、<code>distinct</code> 这些查询的语句，where 条件过滤出来的结果集请保持在 1000 行以内，否则 SQL 会很慢。</li>\n</ol>\n<h3 id=\"2-2-5-线上禁止使用的-SQL-语句\"><a href=\"#2-2-5-线上禁止使用的-SQL-语句\" class=\"headerlink\" title=\"2.2.5 线上禁止使用的 SQL 语句\"></a>2.2.5 线上禁止使用的 SQL 语句</h3><ol>\n<li>【高危】禁用 <code>update|delete t1 … where a = XX limit XX;</code> 这种带 limit 的更新语句。因为会导致主从不一致，导致数据错乱。建议加上 <code>order by PK</code>。</li>\n<li>【高危】禁止使用关联子查询，如 <code>update t1 set … where name in(select name from user where …);</code>，效率极其低下。</li>\n<li>【强制】禁用 procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li>\n<li>【强制】禁用 <code>insert into … on duplicate key update …</code> 在高并发环境下，会造成主从不一致。</li>\n<li>【强制】禁止联表更新语句，如 <code>update t1, t2 where t1.id = t2.id …</code>。</li>\n</ol>\n","text":"MySQL 数据库设计规范1. 规范背景与目的MySQL 数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用 MySQL 数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导 RD、QA、OP 等技术人员做出适合线上业务的数据...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">MySQL 数据库设计规范</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E8%A7%84%E8%8C%83%E8%83%8C%E6%99%AF%E4%B8%8E%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">1. 规范背景与目的</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">2. 设计规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2.1 数据库设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-1-%E4%B8%80%E8%88%AC%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2.1.1 一般命名规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-2-%E5%BA%93\"><span class=\"toc-text\">2.1.2 库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-3-%E8%A1%A8\"><span class=\"toc-text\">2.1.3 表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-4-%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">2.1.4 字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-5-%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">2.1.5 字段数据类型优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-6-%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2.1.6 索引设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-7-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E3%80%81%E5%88%86%E5%8C%BA%E8%A1%A8\"><span class=\"toc-text\">2.1.7 分库分表、分区表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-8-%E5%AD%97%E7%AC%A6%E9%9B%86\"><span class=\"toc-text\">2.1.8 字符集</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-9-%E7%A8%8B%E5%BA%8F%E5%B1%82-DAO-%E8%AE%BE%E8%AE%A1%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">2.1.9 程序层 DAO 设计建议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-10-%E4%B8%80%E4%B8%AA%E8%A7%84%E8%8C%83%E7%9A%84%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2.1.10 一个规范的建表语句示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-SQL-%E7%BC%96%E5%86%99\"><span class=\"toc-text\">2.2 SQL 编写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-DML-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.2.1 DML 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2-%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">2.2.2 多表连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-3-%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">2.2.3 事务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-4-%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84\"><span class=\"toc-text\">2.2.4 排序和分组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-5-%E7%BA%BF%E4%B8%8A%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8%E7%9A%84-SQL-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.2.5 线上禁止使用的 SQL 语句</span></a></li></ol></li></ol></li></ol>","author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> 浪浪山打工人 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL 常用函数&数据类型","uid":"6dd356025f124f190d32c47865445ac7","slug":"MySQL/MySQL常用函数汇总","date":"2022-02-23T05:32:16.000Z","updated":"2022-12-29T05:37:01.806Z","comments":true,"path":"api/articles/MySQL/MySQL常用函数汇总.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/xcn.jpg","text":"MySQL 常用函数汇总字符串函数 函数 功能 CONCAT(s1,s2,……) 字符串连接 INSERT(str,x,y,instr) 将指定开始标记到结束的字符串替换为指定字符串 LOWER(str) 将字符串所有字符转为小写 UPPER(str) 将字符串所有字符串转为大写...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/tags/MySQL.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> 浪浪山打工人 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java 技术栈（基础篇）","uid":"05a67146f7d966ee36e5b6b5404bf177","slug":"Java/Java 技术栈（基础篇）","date":"2022-02-22T05:32:16.000Z","updated":"2023-01-16T08:29:45.513Z","comments":true,"path":"api/articles/Java/Java 技术栈（基础篇）.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/genji.jpg","text":"一、数据类型基本类型 byte&#x2F;8 char&#x2F;16 short&#x2F;16 int&#x2F;32 float&#x2F;32 long&#x2F;64 double&#x2F;64 boolean&#x2F;~ boolean 只有两个值：true、fa...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":4,"path":"api/tags/JAVA.json"},{"name":"Java基础","slug":"Java基础","count":3,"path":"api/tags/Java基础.json"},{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> 浪浪山打工人 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}