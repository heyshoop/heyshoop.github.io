{"title":"MySQL 主键设计盘点","uid":"1a07a30e4d12a51de2d9119320d5847f","slug":"MySQL/MySQL主键设计盘点","date":"2022-02-23T05:32:16.000Z","updated":"2022-12-29T02:08:27.595Z","comments":true,"path":"api/articles/MySQL/MySQL主键设计盘点.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/mustang.jpg","content":"<h1 id=\"主键定义\"><a href=\"#主键定义\" class=\"headerlink\" title=\"主键定义\"></a>主键定义</h1><p>唯一标识表中每行的一个列（或一组列）称为主键。主键用来表示一个特定的行。</p>\n<h1 id=\"主键设计和应用原则\"><a href=\"#主键设计和应用原则\" class=\"headerlink\" title=\"主键设计和应用原则\"></a>主键设计和应用原则</h1><p>除了满足MySQL强制实施的规则（主键不可重复；一行中主键不可为空）之外，主键的设计和应用应当还遵守以下公认的原则：</p>\n<ul>\n<li>不更新主键列中的值；</li>\n<li>不重用主键列的值；</li>\n<li>不在主键列中使用可能会更改的值。（例如，如果使用一个 名字作为主键以标识某个供应商，当该供应商合并和更改其 名字时，必须更改这个主键。）</li>\n</ul>\n<h1 id=\"主键生成策略\"><a href=\"#主键生成策略\" class=\"headerlink\" title=\"主键生成策略\"></a>主键生成策略</h1><h2 id=\"自增ID\"><a href=\"#自增ID\" class=\"headerlink\" title=\"自增ID\"></a>自增ID</h2><p>使用数据库的自动增长（auto_increment），是比较简单和常见的ID生成方案，数据库内部可以确保生成id的唯一性。<br><strong>优点：</strong><br>1、数据库自动编号，速度快，而且是增量增长，聚集型主键按顺序存放，对于检索非常有利。<br>2、 数字型，占用空间小，易排序，在程序中传递方便。<br><strong>缺点：</strong><br><strong>1、不支持水平分片架构，水平分片的设计当中，这种方法显然不能保证全局唯一。</strong><br><strong>2、对数据库有依赖，每种数据库可能实现不一样，数据库切换时候，涉及到代码的修改，不利于扩展</strong><br><strong>结论：</strong><br><strong>自增id做主键适用于非分布式架构。</strong></p>\n<h2 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h2><p>| **UUID:通用唯一识别码（英语：Universally Unique Identifier，缩写：UUID）是用于计算机体系中以识别信息数目的一个128位标识符，还有相关的术语：全局唯一标识符（GUID）。 根据标准方法生成，不依赖中央机构的注册和分配，UUID具有唯一性，这与其他大多数编号方案不同。重复UUID码概率接近零，可以忽略不计。UUID是由一组32位数的16进制数字所构成,标准型式包含32个16进制数字，以连字号分为五段，形式为8-4-4-4-12的32个字符。示例：<br>550e8400-e29b-41d4-a716-446655440000</p>\n<table>\n<thead>\n<tr>\n<th>到目前为止业界一共有5种方式生成UUID，详情可见IETF发布的UUID规范**<a href=\"https://www.ietf.org/rfc/rfc4122.txt\">A Universally Unique IDentifier (UUID) URN Namespace</a></th>\n</tr>\n</thead>\n</table>\n<p><strong>优点：</strong><br><strong>性能非常高：本地生成，没有网络消耗。</strong><br><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281626132.png\"><br><strong>缺点：</strong><br><strong>1、不易于存储：UUID太长，16字节128位，通常以36长度的字符串表示，很多场景不适用。</strong><br><strong>2、信息不安全：基于MAC地址生成UUID的算法可能会造成MAC地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。</strong><br><strong>3、ID作为主键时在特定的环境会存在一些问题，比如需要排序的时候——UUID是无序的。</strong><br><strong>4、MySQL官方有明确的建议主键要尽量越短越好，36个字符长度的UUID不符合要求。</strong><br><strong>5、对MySQL索引不利：作为数据库主键，在InnoDB引擎下，UUID的无序性可能会引起数据位置频繁变动，严重影响性能。</strong><br><strong>关于MySQL 使用自增ID主键和UUID 作为主键的性能比较可以查看参考【8】。</strong><br><strong>结论：</strong><br><strong>1、uuid做主键适用于小规模分布式架构用。</strong><br><strong>2、在使用uuid作为主键的时候，最好设计createtime（创建时间）列和modifytime（修改时间）列以应付可能的排序等场景。</strong></p>\n<h2 id=\"自建的id生成器\"><a href=\"#自建的id生成器\" class=\"headerlink\" title=\"自建的id生成器\"></a>自建的id生成器</h2><h3 id=\"Twitter的snowflake算法\"><a href=\"#Twitter的snowflake算法\" class=\"headerlink\" title=\"Twitter的snowflake算法\"></a>Twitter的snowflake算法</h3><p><strong>Twitter的snowflake算法的核心把时间戳，工作机器id，序列号组合在一起。</strong><br><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281627800.png\"><br><strong>除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。</strong></p>\n<p><strong>具体可以查看：</strong><a href=\"https://github.com/twitter-archive/snowflake\">github.com&#x2F;twitter-arc…</a>** （但是最近一次的提交是6年前，显示已经停止了对初始版snowflake的支持）**<br><strong>源码如下：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>yjd<span class=\"token punctuation\">.</span>comm<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/**\n* Created by pc on 2017/8/16 0016.\n*/</span>\n\n<span class=\"token comment\">/**\n* Twitter_Snowflake&lt;br>\n* SnowFlake的结构如下(每部分用-分开):&lt;br>\n* 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br>\n* 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br>\n* 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)\n* 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br>\n* 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br>\n* 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br>\n* 加起来刚好64位，为一个Long型。&lt;br>\n* SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowflakeIdWorker</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token comment\">// ==============================Fields===========================================</span>\n    <span class=\"token comment\">/**\n    * 开始时间截 (2015-01-01)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> twepoch <span class=\"token operator\">=</span> <span class=\"token number\">1420041600000L</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 机器id所占的位数\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> workerIdBits <span class=\"token operator\">=</span> <span class=\"token number\">5L</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 数据标识id所占的位数\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> datacenterIdBits <span class=\"token operator\">=</span> <span class=\"token number\">5L</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> maxWorkerId <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> workerIdBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 支持的最大数据标识id，结果是31\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> maxDatacenterId <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> datacenterIdBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 序列在id中占的位数\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> sequenceBits <span class=\"token operator\">=</span> <span class=\"token number\">12L</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 机器ID向左移12位\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> workerIdShift <span class=\"token operator\">=</span> sequenceBits<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 数据标识id向左移17位(12+5)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> datacenterIdShift <span class=\"token operator\">=</span> sequenceBits <span class=\"token operator\">+</span> workerIdBits<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 时间截向左移22位(5+5+12)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timestampLeftShift <span class=\"token operator\">=</span> sequenceBits <span class=\"token operator\">+</span> workerIdBits <span class=\"token operator\">+</span> datacenterIdBits<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> sequenceMask <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> sequenceBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 工作机器ID(0~31)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> workerId<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 数据中心ID(0~31)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> datacenterId<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 毫秒内序列(0~4095)\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/**\n    * 上次生成ID的时间截\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastTimestamp <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//==============================Constructors=====================================</span>\n    \n    <span class=\"token comment\">/**\n    * 构造函数\n    *\n    * @param workerId     工作ID (0~31)\n    * @param datacenterId 数据中心ID (0~31)\n    */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SnowflakeIdWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> workerId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> datacenterId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workerId <span class=\"token operator\">></span> maxWorkerId <span class=\"token operator\">||</span> workerId <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker Id can't be greater than %d or less than 0\"</span><span class=\"token punctuation\">,</span> maxWorkerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datacenterId <span class=\"token operator\">></span> maxDatacenterId <span class=\"token operator\">||</span> datacenterId <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"datacenter Id can't be greater than %d or less than 0\"</span><span class=\"token punctuation\">,</span> maxDatacenterId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workerId <span class=\"token operator\">=</span> workerId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>datacenterId <span class=\"token operator\">=</span> datacenterId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">// ==============================Methods==========================================</span>\n    \n    <span class=\"token comment\">/**\n    * 获得下一个ID (该方法是线程安全的)\n    *\n    * @return SnowflakeId\n    */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">long</span> <span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> timestamp <span class=\"token operator\">=</span> <span class=\"token function\">timeGen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timestamp <span class=\"token operator\">&lt;</span> lastTimestamp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span><span class=\"token punctuation\">,</span> lastTimestamp <span class=\"token operator\">-</span> timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token comment\">//如果是同一时间生成的，则进行毫秒内序列</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastTimestamp <span class=\"token operator\">==</span> timestamp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> sequenceMask<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//毫秒内序列溢出</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//阻塞到下一个毫秒,获得新的时间戳</span>\n                timestamp <span class=\"token operator\">=</span> <span class=\"token function\">tilNextMillis</span><span class=\"token punctuation\">(</span>lastTimestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//时间戳改变，毫秒内序列重置</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token comment\">//上次生成ID的时间截</span>\n        lastTimestamp <span class=\"token operator\">=</span> timestamp<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//移位并通过或运算拼到一起组成64位的ID</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timestamp <span class=\"token operator\">-</span> twepoch<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> timestampLeftShift<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>datacenterId <span class=\"token operator\">&lt;&lt;</span> datacenterIdShift<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>workerId <span class=\"token operator\">&lt;&lt;</span> workerIdShift<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n            <span class=\"token operator\">|</span> sequence<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">/**\n    * 阻塞到下一个毫秒，直到获得新的时间戳\n    *\n    * @param lastTimestamp 上次生成ID的时间截\n    * @return 当前时间戳\n    */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">long</span> <span class=\"token function\">tilNextMillis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> lastTimestamp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> timestamp <span class=\"token operator\">=</span> <span class=\"token function\">timeGen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>timestamp <span class=\"token operator\">&lt;=</span> lastTimestamp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            timestamp <span class=\"token operator\">=</span> <span class=\"token function\">timeGen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> timestamp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">/**\n    * 返回以毫秒为单位的当前时间\n    *\n    * @return 当前时间(毫秒)\n    */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">long</span> <span class=\"token function\">timeGen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//==============================Test=============================================</span>\n    \n    <span class=\"token comment\">/**\n    * 测试\n    */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SnowflakeIdWorker</span> idWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowflakeIdWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> startime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> idWorker<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//            System.out.println(Long.toBinaryString(id));</span>\n            <span class=\"token comment\">//            System.out.println(id);</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>优点：</strong><br><strong>1、毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。 2、 不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。 3、可以根据自身业务特性分配bit位，非常灵活。</strong><br><strong>缺点：</strong><br><strong>强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。</strong><br><strong>结论：</strong><br><strong>用自建的id生成器做主键适用于大规模分布式架构</strong></p>\n","text":"主键定义唯一标识表中每行的一个列（或一组列）称为主键。主键用来表示一个特定的行。 主键设计和应用原则除了满足MySQL强制实施的规则（主键不可重复；一行中主键不可为空）之外，主键的设计和应用应当还遵守以下公认的原则： 不更新主键列中的值； 不重用主键列的值； 不在主键列中使用可能...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">主键定义</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BA%94%E7%94%A8%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">主键设计和应用原则</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">主键生成策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%A2%9EID\"><span class=\"toc-text\">自增ID</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UUID\"><span class=\"toc-text\">UUID</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%BB%BA%E7%9A%84id%E7%94%9F%E6%88%90%E5%99%A8\"><span class=\"toc-text\">自建的id生成器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Twitter%E7%9A%84snowflake%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Twitter的snowflake算法</span></a></li></ol></li></ol></li></ol>","author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> @ <b>微信：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Druid监控导致的内存溢出问题定位处理","uid":"9736882d32005a945dbd1b55fb5920ee","slug":"Java/Druid监控导致的内存溢出问题定位处理","date":"2018-08-06T06:03:15.000Z","updated":"2022-12-29T02:18:12.908Z","comments":true,"path":"api/articles/Java/Druid监控导致的内存溢出问题定位处理.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/jks.jpg","text":"0、起因 一台部署于商户私有云中的应用频繁宕机，经查为 OOM，周期大约一周一次，较规律，所谓千里之堤毁于蚁穴，初步怀疑是轻微的内存泄漏不断积累导致的内存溢出，所以再次宕机出现时果断 dump 内存镜像开始分析 1、内存溢出原理 常见内存溢出： 相信通过写 java 程序讨生活的...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":5,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"},{"name":"OOM","slug":"OOM","count":2,"path":"api/tags/OOM.json"},{"name":"Druid","slug":"Druid","count":1,"path":"api/tags/Druid.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> @ <b>微信：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"MySQL 常用函数&数据类型","uid":"6dd356025f124f190d32c47865445ac7","slug":"MySQL/MySQL常用函数汇总","date":"2022-02-23T05:32:16.000Z","updated":"2022-12-28T08:29:36.678Z","comments":true,"path":"api/articles/MySQL/MySQL常用函数汇总.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":null,"text":"MySQL 常用函数汇总字符串函数 函数 功能 CONCAT(s1,s2,……) 字符串连接 INSERT(str,x,y,instr) 将指定开始标记到结束的字符串替换为指定字符串 LOWER(str) 将字符串所有字符转为小写 UPPER(str) 将字符串所有字符串转为大写...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/tags/MySQL.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> @ <b>微信：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}