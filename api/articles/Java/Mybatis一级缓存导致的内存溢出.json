{"title":"Mybatis一级缓存导致的内存溢出","uid":"d8253a8b0f6101721f69eb1f7316985f","slug":"Java/Mybatis一级缓存导致的内存溢出","date":"2018-09-29T12:06:29.000Z","updated":"2022-12-29T02:21:21.894Z","comments":true,"path":"api/articles/Java/Mybatis一级缓存导致的内存溢出.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/dva.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>接上篇 <a href=\"https://www.alihai5.com/post/Java%2FDruid%E7%9B%91%E6%8E%A7%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%E5%A4%84%E7%90%86\">Druid 监控导致的内存溢出问题定位处理</a> JVM 内存溢出相关，废话不多说直接上分析过程。</p></blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"1、服务器内存快照分析\"><a href=\"#1、服务器内存快照分析\" class=\"headerlink\" title=\"1、服务器内存快照分析\"></a>1、服务器内存快照分析</h1><p>  首先通过快照查看最大的二十个对象如下图：<br>  <img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291005735.png\"></p>\n<p>根据反馈数据可以发现前十个对象大小基本差不多，猜测应该由一个问题导致，点击去进一步定位问题。</p>\n<h1 id=\"2、定位引起内存溢出的关键对象\"><a href=\"#2、定位引起内存溢出的关键对象\" class=\"headerlink\" title=\"2、定位引起内存溢出的关键对象\"></a>2、定位引起内存溢出的关键对象</h1><p>  发现引起内存溢出的对象很明确为 mybatis 的 PerpetualCache 对象：<br>  <img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291005713.png\"><br>  <img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291005308.png\"></p>\n<h1 id=\"3、分析引起内存溢出的原因\"><a href=\"#3、分析引起内存溢出的原因\" class=\"headerlink\" title=\"3、分析引起内存溢出的原因\"></a>3、分析引起内存溢出的原因</h1><ul>\n<li><p>猜测溢出</p>\n<p><code>PerpetualCache</code> 其实是 Mybatis 的一级缓存对象，且全部为 <code>HashMap</code> 类型对象，所以可以大胆猜测是由于 Mybatis 一级缓存不正确使用造成的，敢于如此猜测是因为：</p>\n<p>MyBatis 对会话（Session）级别的一级缓存设计的比较简单，就简单地使用了 HashMap 来维护，并没有对 HashMap 的容量和大小进行限制。</p>\n<p>所以如果我们一直使用某一个 SqlSession 对象查询数据，这样会不会导致 HashMap 太大，而导致 java.lang.OutOfMemoryError 错误？</p>\n</li>\n</ul>\n<ul>\n<li><p>验证溢出</p>\n<p>Mybatis 的一级缓存是事务级别的，一旦事务提交就会清空。因此可能该线程的事务一直未结束和提交。那就从一个拥有大量查询业务繁杂的功能入手验证，结合二阶段定位到的零星线索，发现服务器内存溢出时正在处理的业务是数据下发，那我们就以次为入手点验证：</p>\n<p>A.首先设置 JVM 参数，为了尽快实现内存溢出效果，设定一个合适的参数，可根据本地环境调整：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">-</span>server <span class=\"token operator\">-</span><span class=\"token constant\">XX</span><span class=\"token operator\">:</span><span class=\"token class-name\">PermSize</span><span class=\"token operator\">=</span><span class=\"token number\">256</span>M <span class=\"token operator\">-</span><span class=\"token constant\">XX</span><span class=\"token operator\">:</span><span class=\"token class-name\">MaxPermSize</span><span class=\"token operator\">=</span><span class=\"token number\">256</span>m\n<span class=\"token operator\">-</span><span class=\"token class-name\">Xms300M</span> <span class=\"token operator\">-</span><span class=\"token class-name\">Xmx300M</span>\n<span class=\"token operator\">-</span><span class=\"token class-name\">Dcom</span><span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>management<span class=\"token punctuation\">.</span>jmxremote<span class=\"token punctuation\">.</span>port<span class=\"token operator\">=</span><span class=\"token number\">8999</span>\n<span class=\"token operator\">-</span><span class=\"token class-name\">Dcom</span><span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>management<span class=\"token punctuation\">.</span>jmxremote<span class=\"token punctuation\">.</span>ssl<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>\n<span class=\"token operator\">-</span><span class=\"token class-name\">Dcom</span><span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>management<span class=\"token punctuation\">.</span>jmxremote<span class=\"token punctuation\">.</span>authenticate<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>\n<span class=\"token operator\">-</span><span class=\"token constant\">XX</span><span class=\"token operator\">:</span><span class=\"token operator\">+</span><span class=\"token class-name\">HeapDumpOnOutOfMemoryError</span>\n<span class=\"token operator\">-</span><span class=\"token constant\">XX</span><span class=\"token operator\">:</span><span class=\"token class-name\">HeapDumpPath</span><span class=\"token operator\">=</span><span class=\"token operator\">/</span><span class=\"token class-name\">Users</span><span class=\"token operator\">/</span>anchor<span class=\"token operator\">/</span><span class=\"token class-name\">Downloads</span><span class=\"token operator\">/</span>dump<span class=\"token operator\">/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>B.开启 Jvisualvm 监控，应用中开启下发业务，获取监控数据：</p>\n<p>如下图所示可以看到，本地程序在运行一段时间后已经处于假死状态，GC 回收活动频繁，可堆内存基本未见有效回收，CPU 过山车式的起伏，很快内存溢出了，至此可以得出结论我们找对了入手点：</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291006570.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291006553.png\"></p>\n<ul>\n<li><p>修改溢出</p>\n<p>加断点分析下发业务发现，下发业务存在大量 for 循环引发大量数据库查询操作，且该操作参数不重复，也就导致了 Mybatis 的一级缓存一直无法命中，所以正好验证我们的猜测，在一次下发请求中 Mybatis 创建了海量的缓存数据，改部分数据在下发业务完成之前是无法释放的，占用了大量的内存资源，如果此时刚好服务器内存有限很容易引发 GC overhead limit exceded 错误，进而造成服务假死内存溢出：</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291007092.png\"></p>\n<p>  结合项目实际情况针对一级缓存的可利用率实在过低，由于参数一直变动，缓存命中几率极低，从 MyBatis 一级缓存来看，它以单纯的 HashMap 做缓存，没有容量控制，而一次 SqlSession 中通常来说并不会有大量的查询操作，因此只适用于一次 SqlSession，且项目中已开启二级缓存，所以我们考虑修改一级缓存规则：</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-设置一级缓存模式为STATEMENT，默认为SESSION，SESSION为会话级别，STATEMENT为SQL级别-&gt;\n&lt;setting name&#x3D;&quot;localCacheScope&quot; value&#x3D;&quot;STATEMENT&quot;&#x2F;&gt;\n&lt;!-PS：一级缓存的范围有SESSION和STATEMENT两种，默认是SESSION，如果我们不需要使用一级缓存，那么我们可以把一级缓存的范围指定为STATEMENT，这样每次执行完一个Mapper语句后都会将一级缓存清除。如果需要更改一级缓存的范围，请在Mybatis的配置文件中，在&lt;settings&gt;下通过localCacheScope指定。-&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>再次验证</p>\n<p>启动项目，开启下发业务，打开监控，效果如下：</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212291007101.png\"></p>\n<p>  818 家门店下发业务正常完成，期间堆内存回收稳定，无溢出情况出现（坡度较陡是因为本地 JVM 内存设置较低，为提高内存利用率，GC 回收频繁）。</p>\n<h1 id=\"4、总结\"><a href=\"#4、总结\" class=\"headerlink\" title=\"4、总结\"></a>4、总结</h1><ul>\n<li><p>疑问：既然一级缓存会导致内存溢出，为什么 Mybatis 还如此设计？</p>\n<p>MyBatis 这样设计也有它自己的理由：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>a.一般而言 <code>SqlSession</code> 的生存时间很短。一般情况下使用一个 <code>SqlSession</code> 对象执行的操作不会太多，执行完就会消亡；</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>b.对于某一个 <code>SqlSession</code> 对象而言，只要执行 <code>update</code> 操作（<code>update</code>、<code>insert</code>、<code>delete</code>），都会将这个 <code>SqlSession</code> 对象中对应的一级缓存清空掉，所以一般情况下不会出现缓存过大，影响 JVM 内存空间的问题；</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>c.可以手动地释放掉 <code>SqlSession</code> 对象中的缓存。</p></blockquote>\n</li>\n<li><p>收获：Mybatis 一级缓存的存储流程</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>a.<code>MyBatis</code> 的一级缓存是 <code>SqlSession</code> 级别的，但是它并不定义在 <code>SqlSessio</code> 接口的实现类 <code>DefaultSqlSession</code> 中，而是定义在 <code>DefaultSqlSession</code> 的成员变量 <code>Executor</code> <code>中，Executor</code> 是在 <code>openSession</code> 的时候被实例化出来的，它的默认实现为 <code>SimpleExecutor。</code></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>b.<code>MyBatis</code> 中的一级缓存，与有没有配置无关，只要 <code>SqlSession</code> <code>存在，MyBastis</code> <code>一级缓存就存在，localCache</code> 的类型是 <code>PerpetualCache，它其实很简单，一个</code> id 属性+一个 <code>HashMap</code> 属性而已，id 是一个名为”localCache”的字符串，HashMap 用于存储数据，Key 为 <code>CacheKey</code>，<code>Value</code> 为查询结果。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>c.<code>MyBatis</code> 的一级缓存查询的时候默认都是会先尝试从一级缓存中获取数据的，即想每次查询都走 DB 也行，将<code>&lt;select&gt;</code>标签中的 <code>flushCache</code> 属性设置为 <code>true</code> 即可，这意味着每次查询的时候都会清理一遍 <code>PerpetualCache</code>，<code>PerpetualCache</code> 中没数据，自然只能走 DB。</p></blockquote>\n</li>\n</ul>\n","feature":true,"text":" 接上篇 Druid 监控导致的内存溢出问题定位处理 JVM 内存溢出相关，废话不多说直接上分析过程。 1、服务器内存快照分析 首先通过快照查看最大的二十个对象如下图： 根据反馈数据可以发现前十个对象大小基本差不多，猜测应该由一个问题导致，点击去进一步定位问题。 2、定位引起内存...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"},{"name":"OOM","slug":"OOM","count":2,"path":"api/tags/OOM.json"},{"name":"Mybatis","slug":"Mybatis","count":1,"path":"api/tags/Mybatis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7%E5%88%86%E6%9E%90\"><span class=\"toc-text\">1、服务器内存快照分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%9A%E4%BD%8D%E5%BC%95%E8%B5%B7%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E5%85%B3%E9%94%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2、定位引起内存溢出的关键对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%88%86%E6%9E%90%E5%BC%95%E8%B5%B7%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">3、分析引起内存溢出的原因</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4、总结</span></a></li></ol>","author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> 浪浪山打工人 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"浪浪山打工人旅游指南（零）系列的起源","uid":"b560fa9a3b1b6316fdcd91b0b326e0f3","slug":"浪浪山打工人/浪浪山打工人旅游指南（零）系列的起源","date":"2023-01-16T11:26:11.000Z","updated":"2023-01-17T10:20:24.618Z","comments":true,"path":"api/articles/浪浪山打工人/浪浪山打工人旅游指南（零）系列的起源.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/lls.jpg","text":" “我想离开浪浪山”，小猪妖如是说道。 每一个打工人都身处于困住自己的浪浪山里，在干着“大王让我来巡山”的工作，想要走出去闯闯，却要被身边的声音所左右。 最终也没有勇气走出浪浪山，或者说当你离开这座浪浪山后，你会发现有无数个浪浪山…… 小猪妖的故事触动了很多打工人的心，让无数人直...","link":"","photos":[],"count_time":{"symbolsCount":717,"symbolsTime":"1 mins."},"categories":[{"name":"浪浪山打工人","slug":"浪浪山打工人","count":2,"path":"api/categories/浪浪山打工人.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":4,"path":"api/tags/JAVA.json"},{"name":"Java基础","slug":"Java基础","count":3,"path":"api/tags/Java基础.json"},{"name":"Java面试题","slug":"Java面试题","count":2,"path":"api/tags/Java面试题.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> 浪浪山打工人 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Druid监控导致的内存溢出问题定位处理","uid":"9736882d32005a945dbd1b55fb5920ee","slug":"Java/Druid监控导致的内存溢出问题定位处理","date":"2018-08-06T06:03:15.000Z","updated":"2023-01-17T07:32:06.801Z","comments":true,"path":"api/articles/Java/Druid监控导致的内存溢出问题定位处理.json","keywords":"阿里孩舞,五月西恩,Anchor,阁楼麻雀,码农,程序猿,JAVA","cover":"/medias/jks.jpg","text":"0、起因 一台部署于商户私有云中的应用频繁宕机，经查为 OOM，周期大约一周一次，较规律，所谓千里之堤毁于蚁穴，初步怀疑是轻微的内存泄漏不断积累导致的内存溢出，所以再次宕机出现时果断 dump 内存镜像开始分析 1、内存溢出原理 常见内存溢出： 相信通过写 java 程序讨生活的...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"},{"name":"OOM","slug":"OOM","count":2,"path":"api/tags/OOM.json"},{"name":"Druid","slug":"Druid","count":1,"path":"api/tags/Druid.json"}],"author":{"name":"Anchor","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/heyshoop/imageRepository@master/images/202212281657361.png","link":"/","description":"新生代农民工 <br /> 技术无产阶级 <br /> 浪浪山打工人 <br /> @ <b>TG：Alihai5</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}